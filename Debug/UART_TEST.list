
UART_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000417c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004358  08004358  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004360  08004360  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004368  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  20000078  080043e0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  080043e0  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fe0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000160c  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00029698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000628  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158a4  00000000  00000000  0002a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000618e  00000000  00000000  0003fc44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085a97  00000000  00000000  00045dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb869  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d58  00000000  00000000  000cb8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080042fc 	.word	0x080042fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080042fc 	.word	0x080042fc

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b972 	b.w	8000cc0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	4688      	mov	r8, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14b      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4615      	mov	r5, r2
 8000a06:	d967      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0720 	rsb	r7, r2, #32
 8000a12:	fa01 f302 	lsl.w	r3, r1, r2
 8000a16:	fa20 f707 	lsr.w	r7, r0, r7
 8000a1a:	4095      	lsls	r5, r2
 8000a1c:	ea47 0803 	orr.w	r8, r7, r3
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a2c:	fa1f fc85 	uxth.w	ip, r5
 8000a30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a38:	fb07 f10c 	mul.w	r1, r7, ip
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18eb      	adds	r3, r5, r3
 8000a42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a46:	f080 811b 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8118 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a50:	3f02      	subs	r7, #2
 8000a52:	442b      	add	r3, r5
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a68:	45a4      	cmp	ip, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	192c      	adds	r4, r5, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a72:	f080 8107 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	f240 8104 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	442c      	add	r4, r5
 8000a80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a84:	eba4 040c 	sub.w	r4, r4, ip
 8000a88:	2700      	movs	r7, #0
 8000a8a:	b11e      	cbz	r6, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c6 4300 	strd	r4, r3, [r6]
 8000a94:	4639      	mov	r1, r7
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0xbe>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80eb 	beq.w	8000c7a <__udivmoddi4+0x286>
 8000aa4:	2700      	movs	r7, #0
 8000aa6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aaa:	4638      	mov	r0, r7
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	fab3 f783 	clz	r7, r3
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d147      	bne.n	8000b4a <__udivmoddi4+0x156>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xd0>
 8000abe:	4282      	cmp	r2, r0
 8000ac0:	f200 80fa 	bhi.w	8000cb8 <__udivmoddi4+0x2c4>
 8000ac4:	1a84      	subs	r4, r0, r2
 8000ac6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	4698      	mov	r8, r3
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d0e0      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000ad2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ad6:	e7dd      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000ad8:	b902      	cbnz	r2, 8000adc <__udivmoddi4+0xe8>
 8000ada:	deff      	udf	#255	; 0xff
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	f040 808f 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae6:	1b49      	subs	r1, r1, r5
 8000ae8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aec:	fa1f f885 	uxth.w	r8, r5
 8000af0:	2701      	movs	r7, #1
 8000af2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b00:	fb08 f10c 	mul.w	r1, r8, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	f200 80cd 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x14c>
 8000b30:	192c      	adds	r4, r5, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x14a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80b6 	bhi.w	8000caa <__udivmoddi4+0x2b6>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e79f      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b4e:	40bb      	lsls	r3, r7
 8000b50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b58:	fa01 f407 	lsl.w	r4, r1, r7
 8000b5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b68:	4325      	orrs	r5, r4
 8000b6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b6e:	0c2c      	lsrs	r4, r5, #16
 8000b70:	fb08 3319 	mls	r3, r8, r9, r3
 8000b74:	fa1f fa8e 	uxth.w	sl, lr
 8000b78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b80:	429c      	cmp	r4, r3
 8000b82:	fa02 f207 	lsl.w	r2, r2, r7
 8000b86:	fa00 f107 	lsl.w	r1, r0, r7
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b94:	f080 8087 	bcs.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	f240 8084 	bls.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ba2:	4473      	add	r3, lr
 8000ba4:	1b1b      	subs	r3, r3, r4
 8000ba6:	b2ad      	uxth	r5, r5
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bb8:	45a2      	cmp	sl, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc4:	d26b      	bcs.n	8000c9e <__udivmoddi4+0x2aa>
 8000bc6:	45a2      	cmp	sl, r4
 8000bc8:	d969      	bls.n	8000c9e <__udivmoddi4+0x2aa>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4474      	add	r4, lr
 8000bce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bd6:	eba4 040a 	sub.w	r4, r4, sl
 8000bda:	454c      	cmp	r4, r9
 8000bdc:	46c2      	mov	sl, r8
 8000bde:	464b      	mov	r3, r9
 8000be0:	d354      	bcc.n	8000c8c <__udivmoddi4+0x298>
 8000be2:	d051      	beq.n	8000c88 <__udivmoddi4+0x294>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d069      	beq.n	8000cbc <__udivmoddi4+0x2c8>
 8000be8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bec:	eb64 0403 	sbc.w	r4, r4, r3
 8000bf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bf4:	40fd      	lsrs	r5, r7
 8000bf6:	40fc      	lsrs	r4, r7
 8000bf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000c00:	2700      	movs	r7, #0
 8000c02:	e747      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c04:	f1c2 0320 	rsb	r3, r2, #32
 8000c08:	fa20 f703 	lsr.w	r7, r0, r3
 8000c0c:	4095      	lsls	r5, r2
 8000c0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c12:	fa21 f303 	lsr.w	r3, r1, r3
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	4338      	orrs	r0, r7
 8000c1c:	0c01      	lsrs	r1, r0, #16
 8000c1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c22:	fa1f f885 	uxth.w	r8, r5
 8000c26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb07 f308 	mul.w	r3, r7, r8
 8000c32:	428b      	cmp	r3, r1
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x256>
 8000c3a:	1869      	adds	r1, r5, r1
 8000c3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c40:	d22f      	bcs.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d92d      	bls.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c46:	3f02      	subs	r7, #2
 8000c48:	4429      	add	r1, r5
 8000c4a:	1acb      	subs	r3, r1, r3
 8000c4c:	b281      	uxth	r1, r0
 8000c4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5a:	fb00 f308 	mul.w	r3, r0, r8
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x27e>
 8000c62:	1869      	adds	r1, r5, r1
 8000c64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c68:	d217      	bcs.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d915      	bls.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6e:	3802      	subs	r0, #2
 8000c70:	4429      	add	r1, r5
 8000c72:	1ac9      	subs	r1, r1, r3
 8000c74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c78:	e73b      	b.n	8000af2 <__udivmoddi4+0xfe>
 8000c7a:	4637      	mov	r7, r6
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e709      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c80:	4607      	mov	r7, r0
 8000c82:	e6e7      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c84:	4618      	mov	r0, r3
 8000c86:	e6fb      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c88:	4541      	cmp	r1, r8
 8000c8a:	d2ab      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c90:	eb69 020e 	sbc.w	r2, r9, lr
 8000c94:	3801      	subs	r0, #1
 8000c96:	4613      	mov	r3, r2
 8000c98:	e7a4      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	e7e9      	b.n	8000c72 <__udivmoddi4+0x27e>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	e795      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca2:	4667      	mov	r7, ip
 8000ca4:	e7d1      	b.n	8000c4a <__udivmoddi4+0x256>
 8000ca6:	4681      	mov	r9, r0
 8000ca8:	e77c      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000caa:	3802      	subs	r0, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	e747      	b.n	8000b40 <__udivmoddi4+0x14c>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	442b      	add	r3, r5
 8000cb6:	e72f      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb8:	4638      	mov	r0, r7
 8000cba:	e708      	b.n	8000ace <__udivmoddi4+0xda>
 8000cbc:	4637      	mov	r7, r6
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0xa0>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 ff63 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f849 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 f903 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd6:	f000 f8d9 	bl	8000e8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cda:	f000 f8ad 	bl	8000e38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UART2.huart = &huart2;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <main+0x94>)
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <main+0x98>)
 8000ce2:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <main+0x94>)
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <main+0x94>)
 8000cec:	22ff      	movs	r2, #255	; 0xff
 8000cee:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8000cf0:	4819      	ldr	r0, [pc, #100]	; (8000d58 <main+0x94>)
 8000cf2:	f000 f963 	bl	8000fbc <UARTInit>
  UARTResetStart(&UART2);
 8000cf6:	4818      	ldr	r0, [pc, #96]	; (8000d58 <main+0x94>)
 8000cf8:	f000 f988 	bl	800100c <UARTResetStart>


  /* USER CODE END 2 */
  {
	  char temp[32] = {"Hello\r\n"};
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <main+0x9c>)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d04:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
	  UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa5b 	bl	80001d8 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <main+0x94>)
 8000d2c:	f000 fa0c 	bl	8001148 <UARTTxWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int16_t inputChar = UARTReadChar(&UART2);
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <main+0x94>)
 8000d32:	f000 f98f 	bl	8001054 <UARTReadChar>
 8000d36:	4603      	mov	r3, r0
 8000d38:	84fb      	strh	r3, [r7, #38]	; 0x26
	  if(inputChar != -1){
 8000d3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d42:	d005      	beq.n	8000d50 <main+0x8c>
		  /*char temp[32];
		  sprintf(temp, "%d", inputChar);
		  UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));*/

		  uart_protocal(inputChar, &UART2);
 8000d44:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000d48:	4903      	ldr	r1, [pc, #12]	; (8000d58 <main+0x94>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa44 	bl	80011d8 <uart_protocal>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  UARTTxDumpBuffer(&UART2);
 8000d50:	4801      	ldr	r0, [pc, #4]	; (8000d58 <main+0x94>)
 8000d52:	f000 f9a9 	bl	80010a8 <UARTTxDumpBuffer>
  {
 8000d56:	e7eb      	b.n	8000d30 <main+0x6c>
 8000d58:	20000094 	.word	0x20000094
 8000d5c:	2000049c 	.word	0x2000049c
 8000d60:	08004314 	.word	0x08004314

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2230      	movs	r2, #48	; 0x30
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fa3f 	bl	80041f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <SystemClock_Config+0xcc>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <SystemClock_Config+0xcc>)
 8000d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <SystemClock_Config+0xcc>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <SystemClock_Config+0xd0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <SystemClock_Config+0xd0>)
 8000dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <SystemClock_Config+0xd0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dde:	2304      	movs	r3, #4
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de2:	2304      	movs	r3, #4
 8000de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fd82 	bl	80028f4 <HAL_RCC_OscConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df6:	f000 fd2d 	bl	8001854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2102      	movs	r1, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 ffdc 	bl	8002dd4 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e22:	f000 fd17 	bl	8001854 <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3750      	adds	r7, #80	; 0x50
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_USART2_UART_Init+0x50>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART2_UART_Init+0x4c>)
 8000e70:	f002 f9a2 	bl	80031b8 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 fceb 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000049c 	.word	0x2000049c
 8000e88:	40004400 	.word	0x40004400

08000e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_DMA_Init+0x4c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <MX_DMA_Init+0x4c>)
 8000e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_DMA_Init+0x4c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2010      	movs	r0, #16
 8000eb4:	f000 ffbb 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000eb8:	2010      	movs	r0, #16
 8000eba:	f000 ffd4 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2011      	movs	r0, #17
 8000ec4:	f000 ffb3 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ec8:	2011      	movs	r0, #17
 8000eca:	f000 ffcc 	bl	8001e66 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a2c      	ldr	r2, [pc, #176]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a25      	ldr	r2, [pc, #148]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_GPIO_Init+0xd0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2120      	movs	r1, #32
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f68:	f001 fcaa 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_GPIO_Init+0xd8>)
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_GPIO_Init+0xdc>)
 8000f82:	f001 fb1b 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f86:	2320      	movs	r3, #32
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_GPIO_Init+0xd4>)
 8000f9e:	f001 fb0d 	bl	80025bc <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	10210000 	.word	0x10210000
 8000fb8:	40020800 	.word	0x40020800

08000fbc <UARTInit>:

/* USER CODE BEGIN 4 */

void UARTInit(UARTStucrture *uart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <UARTInit+0x4c>)
 8000fc6:	88db      	ldrh	r3, [r3, #6]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f003 f8d6 	bl	800417c <calloc>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <UARTInit+0x4c>)
 8000fda:	889b      	ldrh	r3, [r3, #4]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f003 f8cc 	bl	800417c <calloc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	81da      	strh	r2, [r3, #14]

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000094 	.word	0x20000094

0800100c <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6919      	ldr	r1, [r3, #16]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	88db      	ldrh	r3, [r3, #6]
 8001020:	461a      	mov	r2, r3
 8001022:	f002 f983 	bl	800332c <HAL_UART_Receive_DMA>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	88db      	ldrh	r3, [r3, #6]
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	1ad3      	subs	r3, r2, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 800105c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001060:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	8a9b      	ldrh	r3, [r3, #20]
 8001066:	461c      	mov	r4, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffe0 	bl	800102e <UARTGetRxHead>
 800106e:	4603      	mov	r3, r0
 8001070:	429c      	cmp	r4, r3
 8001072:	d013      	beq.n	800109c <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	8a92      	ldrh	r2, [r2, #20]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	8a9b      	ldrh	r3, [r3, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	88d2      	ldrh	r2, [r2, #6]
 800108c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001090:	fb02 f201 	mul.w	r2, r2, r1
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 800109c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}

080010a8 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	d13d      	bne.n	800113a <UARTTxDumpBuffer+0x92>
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <UARTTxDumpBuffer+0x9c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d139      	bne.n	800113a <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <UARTTxDumpBuffer+0x9c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	89da      	ldrh	r2, [r3, #14]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	899b      	ldrh	r3, [r3, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d02d      	beq.n	8001134 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	89da      	ldrh	r2, [r3, #14]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d906      	bls.n	80010f2 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	89da      	ldrh	r2, [r3, #14]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	e005      	b.n	80010fe <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	889a      	ldrh	r2, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	8992      	ldrh	r2, [r2, #12]
 800110c:	4413      	add	r3, r2
 800110e:	89fa      	ldrh	r2, [r7, #14]
 8001110:	4619      	mov	r1, r3
 8001112:	f002 f89f 	bl	8003254 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	899b      	ldrh	r3, [r3, #12]
 800111a:	461a      	mov	r2, r3
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	4413      	add	r3, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	8892      	ldrh	r2, [r2, #4]
 8001124:	fb93 f1f2 	sdiv	r1, r3, r2
 8001128:	fb02 f201 	mul.w	r2, r2, r1
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <UARTTxDumpBuffer+0x9c>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	}
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200003cf 	.word	0x200003cf

08001148 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	4293      	cmp	r3, r2
 800115e:	bf28      	it	cs
 8001160:	4613      	movcs	r3, r2
 8001162:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001164:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	889b      	ldrh	r3, [r3, #4]
 800116a:	4619      	mov	r1, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	89db      	ldrh	r3, [r3, #14]
 8001170:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001172:	4293      	cmp	r3, r2
 8001174:	bfa8      	it	ge
 8001176:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8001178:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	89d2      	ldrh	r2, [r2, #14]
 8001182:	4413      	add	r3, r2
 8001184:	8aba      	ldrh	r2, [r7, #20]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	4618      	mov	r0, r3
 800118a:	f003 f829 	bl	80041e0 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	89db      	ldrh	r3, [r3, #14]
 8001192:	461a      	mov	r2, r3
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	4413      	add	r3, r2
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	8892      	ldrh	r2, [r2, #4]
 800119c:	fb93 f1f2 	sdiv	r1, r3, r2
 80011a0:	fb02 f201 	mul.w	r2, r2, r1
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80011ac:	8afa      	ldrh	r2, [r7, #22]
 80011ae:	8abb      	ldrh	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d00a      	beq.n	80011ca <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6898      	ldr	r0, [r3, #8]
 80011b8:	8abb      	ldrh	r3, [r7, #20]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80011be:	8afa      	ldrh	r2, [r7, #22]
 80011c0:	8abb      	ldrh	r3, [r7, #20]
 80011c2:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80011c4:	461a      	mov	r2, r3
 80011c6:	f003 f80b 	bl	80041e0 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff ff6c 	bl	80010a8 <UARTTxDumpBuffer>

}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <uart_protocal>:
static uart_state state = state_idle;
static uint8_t sum = 0;
static uint8_t datas[256] = {0},data_ind = 0,n_data = 0;
static uint8_t mode = 0;

void uart_protocal(int16_t input,UARTStucrture *uart){
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b097      	sub	sp, #92	; 0x5c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	80fb      	strh	r3, [r7, #6]

	switch (state) {
 80011e4:	4baf      	ldr	r3, [pc, #700]	; (80014a4 <uart_protocal+0x2cc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	f200 8324 	bhi.w	8001836 <uart_protocal+0x65e>
 80011ee:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <uart_protocal+0x1c>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	08001215 	.word	0x08001215
 80011f8:	08001837 	.word	0x08001837
 80011fc:	08001837 	.word	0x08001837
 8001200:	08001347 	.word	0x08001347
 8001204:	08001371 	.word	0x08001371
 8001208:	080013bb 	.word	0x080013bb
 800120c:	0800180d 	.word	0x0800180d
 8001210:	0800181d 	.word	0x0800181d
		case state_idle:
			sum = data_ind = 0;
 8001214:	4ba4      	ldr	r3, [pc, #656]	; (80014a8 <uart_protocal+0x2d0>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	4ba3      	ldr	r3, [pc, #652]	; (80014a8 <uart_protocal+0x2d0>)
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4ba3      	ldr	r3, [pc, #652]	; (80014ac <uart_protocal+0x2d4>)
 8001220:	701a      	strb	r2, [r3, #0]
			if(input >= 0b10010001 && input <= 0b10011110){
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	2b90      	cmp	r3, #144	; 0x90
 8001228:	dd7b      	ble.n	8001322 <uart_protocal+0x14a>
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	2b9e      	cmp	r3, #158	; 0x9e
 8001230:	dc77      	bgt.n	8001322 <uart_protocal+0x14a>
				mode = input & 0b1111;
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b9c      	ldr	r3, [pc, #624]	; (80014b0 <uart_protocal+0x2d8>)
 800123e:	701a      	strb	r2, [r3, #0]
				sum += input;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b99      	ldr	r3, [pc, #612]	; (80014ac <uart_protocal+0x2d4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4413      	add	r3, r2
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b97      	ldr	r3, [pc, #604]	; (80014ac <uart_protocal+0x2d4>)
 800124e:	701a      	strb	r2, [r3, #0]
				switch (mode){
 8001250:	4b97      	ldr	r3, [pc, #604]	; (80014b0 <uart_protocal+0x2d8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	2b0d      	cmp	r3, #13
 8001258:	d873      	bhi.n	8001342 <uart_protocal+0x16a>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <uart_protocal+0x88>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001299 	.word	0x08001299
 8001264:	080012a7 	.word	0x080012a7
 8001268:	080012af 	.word	0x080012af
 800126c:	080012b7 	.word	0x080012b7
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012d3 	.word	0x080012d3
 8001278:	080012e1 	.word	0x080012e1
 800127c:	080012e9 	.word	0x080012e9
 8001280:	080012f1 	.word	0x080012f1
 8001284:	080012f9 	.word	0x080012f9
 8001288:	08001301 	.word	0x08001301
 800128c:	08001309 	.word	0x08001309
 8001290:	08001311 	.word	0x08001311
 8001294:	08001319 	.word	0x08001319
					case 1:n_data = 2;state = state_data_frame;break;
 8001298:	4b86      	ldr	r3, [pc, #536]	; (80014b4 <uart_protocal+0x2dc>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <uart_protocal+0x2cc>)
 80012a0:	2204      	movs	r2, #4
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e03c      	b.n	8001320 <uart_protocal+0x148>
					case 2:state = state_check_sum;break;
 80012a6:	4b7f      	ldr	r3, [pc, #508]	; (80014a4 <uart_protocal+0x2cc>)
 80012a8:	2205      	movs	r2, #5
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e038      	b.n	8001320 <uart_protocal+0x148>
					case 3:state = state_check_sum;break;
 80012ae:	4b7d      	ldr	r3, [pc, #500]	; (80014a4 <uart_protocal+0x2cc>)
 80012b0:	2205      	movs	r2, #5
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e034      	b.n	8001320 <uart_protocal+0x148>
					case 4:n_data = 1;state = state_data_frame;break;
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <uart_protocal+0x2dc>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	4b79      	ldr	r3, [pc, #484]	; (80014a4 <uart_protocal+0x2cc>)
 80012be:	2204      	movs	r2, #4
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e02d      	b.n	8001320 <uart_protocal+0x148>
					case 5:n_data = 2;state = state_data_frame;break;
 80012c4:	4b7b      	ldr	r3, [pc, #492]	; (80014b4 <uart_protocal+0x2dc>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <uart_protocal+0x2cc>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e026      	b.n	8001320 <uart_protocal+0x148>
					case 6:n_data = 1;state = state_data_frame;break;
 80012d2:	4b78      	ldr	r3, [pc, #480]	; (80014b4 <uart_protocal+0x2dc>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <uart_protocal+0x2cc>)
 80012da:	2204      	movs	r2, #4
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e01f      	b.n	8001320 <uart_protocal+0x148>
					case 7:state = state_n_station;break;
 80012e0:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <uart_protocal+0x2cc>)
 80012e2:	2203      	movs	r2, #3
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e01b      	b.n	8001320 <uart_protocal+0x148>
					case 8:state = state_check_sum;break;
 80012e8:	4b6e      	ldr	r3, [pc, #440]	; (80014a4 <uart_protocal+0x2cc>)
 80012ea:	2205      	movs	r2, #5
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e017      	b.n	8001320 <uart_protocal+0x148>
					case 9:state = state_check_sum;break;
 80012f0:	4b6c      	ldr	r3, [pc, #432]	; (80014a4 <uart_protocal+0x2cc>)
 80012f2:	2205      	movs	r2, #5
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e013      	b.n	8001320 <uart_protocal+0x148>
					case 10:state = state_check_sum;break;
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <uart_protocal+0x2cc>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e00f      	b.n	8001320 <uart_protocal+0x148>
					case 11:state = state_check_sum;break;
 8001300:	4b68      	ldr	r3, [pc, #416]	; (80014a4 <uart_protocal+0x2cc>)
 8001302:	2205      	movs	r2, #5
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e00b      	b.n	8001320 <uart_protocal+0x148>
					case 12:state = state_check_sum;break;
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <uart_protocal+0x2cc>)
 800130a:	2205      	movs	r2, #5
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e007      	b.n	8001320 <uart_protocal+0x148>
					case 13:state = state_check_sum;break;
 8001310:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <uart_protocal+0x2cc>)
 8001312:	2205      	movs	r2, #5
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e003      	b.n	8001320 <uart_protocal+0x148>
					case 14:state = state_check_sum;break;
 8001318:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <uart_protocal+0x2cc>)
 800131a:	2205      	movs	r2, #5
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	bf00      	nop
				}
			}
 8001320:	e00f      	b.n	8001342 <uart_protocal+0x16a>
			else{
				sum = n_data = data_ind = mode = 0;
 8001322:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <uart_protocal+0x2d8>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <uart_protocal+0x2d8>)
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	4b5e      	ldr	r3, [pc, #376]	; (80014a8 <uart_protocal+0x2d0>)
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <uart_protocal+0x2d0>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <uart_protocal+0x2dc>)
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <uart_protocal+0x2dc>)
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <uart_protocal+0x2d4>)
 800133e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001340:	e279      	b.n	8001836 <uart_protocal+0x65e>
			}
 8001342:	bf00      	nop
			break;
 8001344:	e277      	b.n	8001836 <uart_protocal+0x65e>
		case state_n_station:
			n_data = (input+1)/2 & 0xFF;
 8001346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134a:	3301      	adds	r3, #1
 800134c:	0fda      	lsrs	r2, r3, #31
 800134e:	4413      	add	r3, r2
 8001350:	105b      	asrs	r3, r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b57      	ldr	r3, [pc, #348]	; (80014b4 <uart_protocal+0x2dc>)
 8001356:	701a      	strb	r2, [r3, #0]
			sum+= input;
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <uart_protocal+0x2d4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4413      	add	r3, r2
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <uart_protocal+0x2d4>)
 8001366:	701a      	strb	r2, [r3, #0]
			state = state_data_frame;
 8001368:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <uart_protocal+0x2cc>)
 800136a:	2204      	movs	r2, #4
 800136c:	701a      	strb	r2, [r3, #0]
			break;
 800136e:	e262      	b.n	8001836 <uart_protocal+0x65e>
		case state_data_frame:
			if(data_ind < n_data){
 8001370:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <uart_protocal+0x2d0>)
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <uart_protocal+0x2dc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d215      	bcs.n	80013a8 <uart_protocal+0x1d0>
				datas[data_ind] = input;
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <uart_protocal+0x2d0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2d9      	uxtb	r1, r3
 8001386:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <uart_protocal+0x2e0>)
 8001388:	5499      	strb	r1, [r3, r2]
				sum += datas[data_ind++];
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <uart_protocal+0x2d0>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	b2d1      	uxtb	r1, r2
 8001392:	4a45      	ldr	r2, [pc, #276]	; (80014a8 <uart_protocal+0x2d0>)
 8001394:	7011      	strb	r1, [r2, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <uart_protocal+0x2e0>)
 800139a:	5c9a      	ldrb	r2, [r3, r2]
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <uart_protocal+0x2d4>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <uart_protocal+0x2d4>)
 80013a6:	701a      	strb	r2, [r3, #0]
			}
			if(data_ind == n_data){
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <uart_protocal+0x2d0>)
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <uart_protocal+0x2dc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d102      	bne.n	80013ba <uart_protocal+0x1e2>
				state = state_check_sum;
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <uart_protocal+0x2cc>)
 80013b6:	2205      	movs	r2, #5
 80013b8:	701a      	strb	r2, [r3, #0]
			}

		case state_check_sum:
			if(input == (uint8_t) ~sum){
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <uart_protocal+0x2d4>)
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	43d2      	mvns	r2, r2
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f040 8230 	bne.w	800182c <uart_protocal+0x654>
				switch(mode){
 80013cc:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <uart_protocal+0x2d8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	2b0d      	cmp	r3, #13
 80013d4:	f200 822a 	bhi.w	800182c <uart_protocal+0x654>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <uart_protocal+0x208>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	08001419 	.word	0x08001419
 80013e4:	08001457 	.word	0x08001457
 80013e8:	0800147d 	.word	0x0800147d
 80013ec:	080014c9 	.word	0x080014c9
 80013f0:	080014fd 	.word	0x080014fd
 80013f4:	08001547 	.word	0x08001547
 80013f8:	08001573 	.word	0x08001573
 80013fc:	08001601 	.word	0x08001601
 8001400:	08001625 	.word	0x08001625
 8001404:	0800166f 	.word	0x0800166f
 8001408:	080016fb 	.word	0x080016fb
 800140c:	0800175b 	.word	0x0800175b
 8001410:	080017c5 	.word	0x080017c5
 8001414:	080017e9 	.word	0x080017e9
					case 1:{
						uint8_t temp[] = { (0b1001<<4) | mode , datas[0] , datas[1] , (uint8_t)input};
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <uart_protocal+0x2d8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <uart_protocal+0x2e0>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <uart_protocal+0x2e0>)
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						UARTTxWrite(&UART2, temp, 4);
 800143e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001442:	2204      	movs	r2, #4
 8001444:	4619      	mov	r1, r3
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <uart_protocal+0x2e4>)
 8001448:	f7ff fe7e 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <uart_protocal+0x2cc>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
						break;
 8001452:	bf00      	nop
 8001454:	e1d9      	b.n	800180a <uart_protocal+0x632>
					}
					case 2:{
						mcu_connect = 1;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <uart_protocal+0x2e8>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <uart_protocal+0x2ec>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
						UARTTxWrite(&UART2, temp, 2);
 8001464:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001468:	2202      	movs	r2, #2
 800146a:	4619      	mov	r1, r3
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <uart_protocal+0x2e4>)
 800146e:	f7ff fe6b 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <uart_protocal+0x2cc>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
						break;
 8001478:	bf00      	nop
 800147a:	e1c6      	b.n	800180a <uart_protocal+0x632>
					}
					case 3:{
						mcu_connect = 0;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <uart_protocal+0x2e8>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <uart_protocal+0x2ec>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
						UARTTxWrite(&UART2, temp, 2);
 800148a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800148e:	2202      	movs	r2, #2
 8001490:	4619      	mov	r1, r3
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <uart_protocal+0x2e4>)
 8001494:	f7ff fe58 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <uart_protocal+0x2cc>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
						break;
 800149e:	bf00      	nop
 80014a0:	e1b3      	b.n	800180a <uart_protocal+0x632>
 80014a2:	bf00      	nop
 80014a4:	200002c8 	.word	0x200002c8
 80014a8:	200003cc 	.word	0x200003cc
 80014ac:	200002c9 	.word	0x200002c9
 80014b0:	200003ce 	.word	0x200003ce
 80014b4:	200003cd 	.word	0x200003cd
 80014b8:	200002cc 	.word	0x200002cc
 80014bc:	20000094 	.word	0x20000094
 80014c0:	200000ac 	.word	0x200000ac
 80014c4:	08004334 	.word	0x08004334
					}
					case 4:{
						max_velocity = datas[0];
 80014c8:	4bb1      	ldr	r3, [pc, #708]	; (8001790 <uart_protocal+0x5b8>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffcd 	bl	800046c <__aeabi_ui2d>
 80014d2:	4603      	mov	r3, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	4aaf      	ldr	r2, [pc, #700]	; (8001794 <uart_protocal+0x5bc>)
 80014d8:	e9c2 3400 	strd	r3, r4, [r2]
						uint8_t temp[] = {0x58,0b01110101};
 80014dc:	4bae      	ldr	r3, [pc, #696]	; (8001798 <uart_protocal+0x5c0>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
						UARTTxWrite(&UART2, temp, 2);
 80014e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014e8:	2202      	movs	r2, #2
 80014ea:	4619      	mov	r1, r3
 80014ec:	48ab      	ldr	r0, [pc, #684]	; (800179c <uart_protocal+0x5c4>)
 80014ee:	f7ff fe2b 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 80014f2:	4bab      	ldr	r3, [pc, #684]	; (80017a0 <uart_protocal+0x5c8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
						break;
 80014f8:	bf00      	nop
 80014fa:	e186      	b.n	800180a <uart_protocal+0x632>
					}
					case 5:{
						set_position = (double)((uint16_t)(datas[0]<<8) + datas[1])*1e-4;
 80014fc:	4ba4      	ldr	r3, [pc, #656]	; (8001790 <uart_protocal+0x5b8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	4ba1      	ldr	r3, [pc, #644]	; (8001790 <uart_protocal+0x5b8>)
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	4413      	add	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ffbc 	bl	800048c <__aeabi_i2d>
 8001514:	a39a      	add	r3, pc, #616	; (adr r3, 8001780 <uart_protocal+0x5a8>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f821 	bl	8000560 <__aeabi_dmul>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	4aa0      	ldr	r2, [pc, #640]	; (80017a4 <uart_protocal+0x5cc>)
 8001524:	e9c2 3400 	strd	r3, r4, [r2]
						uint8_t temp[] = {0x58,0b01110101};
 8001528:	4b9b      	ldr	r3, [pc, #620]	; (8001798 <uart_protocal+0x5c0>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	87bb      	strh	r3, [r7, #60]	; 0x3c
						UARTTxWrite(&UART2, temp, 2);
 800152e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001532:	2202      	movs	r2, #2
 8001534:	4619      	mov	r1, r3
 8001536:	4899      	ldr	r0, [pc, #612]	; (800179c <uart_protocal+0x5c4>)
 8001538:	f7ff fe06 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 800153c:	4b98      	ldr	r3, [pc, #608]	; (80017a0 <uart_protocal+0x5c8>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
						break;
 8001542:	bf00      	nop
 8001544:	e161      	b.n	800180a <uart_protocal+0x632>
					}
					case 6:{
						goals[0] = datas[0];
 8001546:	4b92      	ldr	r3, [pc, #584]	; (8001790 <uart_protocal+0x5b8>)
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	4b97      	ldr	r3, [pc, #604]	; (80017a8 <uart_protocal+0x5d0>)
 800154c:	701a      	strb	r2, [r3, #0]
						n_goal = 1;
 800154e:	4b97      	ldr	r3, [pc, #604]	; (80017ac <uart_protocal+0x5d4>)
 8001550:	2201      	movs	r2, #1
 8001552:	801a      	strh	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8001554:	4b90      	ldr	r3, [pc, #576]	; (8001798 <uart_protocal+0x5c0>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	873b      	strh	r3, [r7, #56]	; 0x38
						UARTTxWrite(&UART2, temp, 2);
 800155a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800155e:	2202      	movs	r2, #2
 8001560:	4619      	mov	r1, r3
 8001562:	488e      	ldr	r0, [pc, #568]	; (800179c <uart_protocal+0x5c4>)
 8001564:	f7ff fdf0 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 8001568:	4b8d      	ldr	r3, [pc, #564]	; (80017a0 <uart_protocal+0x5c8>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
						break;
 800156e:	bf00      	nop
 8001570:	e14b      	b.n	800180a <uart_protocal+0x632>
					}
					case 7:{
						n_goal = 0;
 8001572:	4b8e      	ldr	r3, [pc, #568]	; (80017ac <uart_protocal+0x5d4>)
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
						for(int i = 0;i < n_data;i++){
 8001578:	2300      	movs	r3, #0
 800157a:	657b      	str	r3, [r7, #84]	; 0x54
 800157c:	e01e      	b.n	80015bc <uart_protocal+0x3e4>
							goals[2*i] = datas[i] & 0b1111;
 800157e:	4a84      	ldr	r2, [pc, #528]	; (8001790 <uart_protocal+0x5b8>)
 8001580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001582:	4413      	add	r3, r2
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	f002 020f 	and.w	r2, r2, #15
 800158e:	b2d1      	uxtb	r1, r2
 8001590:	4a85      	ldr	r2, [pc, #532]	; (80017a8 <uart_protocal+0x5d0>)
 8001592:	54d1      	strb	r1, [r2, r3]
							goals[2*i+1] = datas[i]>>4;
 8001594:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <uart_protocal+0x5b8>)
 8001596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001598:	4413      	add	r3, r2
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3301      	adds	r3, #1
 80015a2:	0912      	lsrs	r2, r2, #4
 80015a4:	b2d1      	uxtb	r1, r2
 80015a6:	4a80      	ldr	r2, [pc, #512]	; (80017a8 <uart_protocal+0x5d0>)
 80015a8:	54d1      	strb	r1, [r2, r3]
							n_goal += 2;
 80015aa:	4b80      	ldr	r3, [pc, #512]	; (80017ac <uart_protocal+0x5d4>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	3302      	adds	r3, #2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b7e      	ldr	r3, [pc, #504]	; (80017ac <uart_protocal+0x5d4>)
 80015b4:	801a      	strh	r2, [r3, #0]
						for(int i = 0;i < n_data;i++){
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	3301      	adds	r3, #1
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
 80015bc:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <uart_protocal+0x5d8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c4:	4293      	cmp	r3, r2
 80015c6:	dbda      	blt.n	800157e <uart_protocal+0x3a6>
						}
						if(goals[n_goal-1] == 0){
 80015c8:	4b78      	ldr	r3, [pc, #480]	; (80017ac <uart_protocal+0x5d4>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a76      	ldr	r2, [pc, #472]	; (80017a8 <uart_protocal+0x5d0>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d105      	bne.n	80015e2 <uart_protocal+0x40a>
							n_goal--;
 80015d6:	4b75      	ldr	r3, [pc, #468]	; (80017ac <uart_protocal+0x5d4>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b73      	ldr	r3, [pc, #460]	; (80017ac <uart_protocal+0x5d4>)
 80015e0:	801a      	strh	r2, [r3, #0]
						}
						uint8_t temp[] = {0x58,0b01110101};
 80015e2:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <uart_protocal+0x5c0>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	86bb      	strh	r3, [r7, #52]	; 0x34
						UARTTxWrite(&UART2, temp, 2);
 80015e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ec:	2202      	movs	r2, #2
 80015ee:	4619      	mov	r1, r3
 80015f0:	486a      	ldr	r0, [pc, #424]	; (800179c <uart_protocal+0x5c4>)
 80015f2:	f7ff fda9 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 80015f6:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <uart_protocal+0x5c8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
						break;
 80015fc:	bf00      	nop
 80015fe:	e104      	b.n	800180a <uart_protocal+0x632>
					}
					case 8:{
						go_now = 1;
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <uart_protocal+0x5dc>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8001606:	4b64      	ldr	r3, [pc, #400]	; (8001798 <uart_protocal+0x5c0>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	863b      	strh	r3, [r7, #48]	; 0x30
						UARTTxWrite(&UART2, temp, 2);
 800160c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001610:	2202      	movs	r2, #2
 8001612:	4619      	mov	r1, r3
 8001614:	4861      	ldr	r0, [pc, #388]	; (800179c <uart_protocal+0x5c4>)
 8001616:	f7ff fd97 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 800161a:	4b61      	ldr	r3, [pc, #388]	; (80017a0 <uart_protocal+0x5c8>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
						break;
 8001620:	bf00      	nop
 8001622:	e0f2      	b.n	800180a <uart_protocal+0x632>
					}
					case 9:{
						uint8_t temp[] = {0x58,0b01110101};
 8001624:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <uart_protocal+0x5c0>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	85bb      	strh	r3, [r7, #44]	; 0x2c
						UARTTxWrite(&UART2, temp, 2);
 800162a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162e:	2202      	movs	r2, #2
 8001630:	4619      	mov	r1, r3
 8001632:	485a      	ldr	r0, [pc, #360]	; (800179c <uart_protocal+0x5c4>)
 8001634:	f7ff fd88 	bl	8001148 <UARTTxWrite>
						uint8_t temp2[] = {0b10011001,current_station,~(0b10011001+current_station) & 0xFF};
 8001638:	2399      	movs	r3, #153	; 0x99
 800163a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800163e:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <uart_protocal+0x5e0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001646:	4b5c      	ldr	r3, [pc, #368]	; (80017b8 <uart_protocal+0x5e0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3b67      	subs	r3, #103	; 0x67
 800164c:	b2db      	uxtb	r3, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
						UARTTxWrite(&UART2, temp2, 3);
 8001656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165a:	2203      	movs	r2, #3
 800165c:	4619      	mov	r1, r3
 800165e:	484f      	ldr	r0, [pc, #316]	; (800179c <uart_protocal+0x5c4>)
 8001660:	f7ff fd72 	bl	8001148 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 8001664:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <uart_protocal+0x5c8>)
 8001666:	2206      	movs	r2, #6
 8001668:	701a      	strb	r2, [r3, #0]
						break;
 800166a:	bf00      	nop
 800166c:	e0cd      	b.n	800180a <uart_protocal+0x632>
					}
					case 10:{
						uint8_t temp[] = {0x58,0b01110101};
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <uart_protocal+0x5c0>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	84bb      	strh	r3, [r7, #36]	; 0x24
						UARTTxWrite(&UART2, temp, 2);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	2202      	movs	r2, #2
 800167a:	4619      	mov	r1, r3
 800167c:	4847      	ldr	r0, [pc, #284]	; (800179c <uart_protocal+0x5c4>)
 800167e:	f7ff fd63 	bl	8001148 <UARTTxWrite>
						uint16_t pos = (uint16_t)(current_position*1e4);
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <uart_protocal+0x5e4>)
 8001684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001688:	a33f      	add	r3, pc, #252	; (adr r3, 8001788 <uart_protocal+0x5b0>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe ff67 	bl	8000560 <__aeabi_dmul>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	4618      	mov	r0, r3
 8001698:	4621      	mov	r1, r4
 800169a:	f7ff f973 	bl	8000984 <__aeabi_d2uiz>
 800169e:	4603      	mov	r3, r0
 80016a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
						uint8_t temp2[] = {0b10011010,pos >> 8,pos & 0xFF, ~(0b10011001+(pos >> 8)+ (pos & 0xFF)) & 0xFF};
 80016a4:	239a      	movs	r3, #154	; 0x9a
 80016a6:	f887 3020 	strb.w	r3, [r7, #32]
 80016aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80016b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	3b67      	subs	r3, #103	; 0x67
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						UARTTxWrite(&UART2, temp2, 4);
 80016e2:	f107 0320 	add.w	r3, r7, #32
 80016e6:	2204      	movs	r2, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	482c      	ldr	r0, [pc, #176]	; (800179c <uart_protocal+0x5c4>)
 80016ec:	f7ff fd2c 	bl	8001148 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <uart_protocal+0x5c8>)
 80016f2:	2206      	movs	r2, #6
 80016f4:	701a      	strb	r2, [r3, #0]
						break;
 80016f6:	bf00      	nop
 80016f8:	e087      	b.n	800180a <uart_protocal+0x632>
					}
					case 11:{
						uint8_t temp[] = {0x58,0b01110101};
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <uart_protocal+0x5c0>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	83bb      	strh	r3, [r7, #28]
						UARTTxWrite(&UART2, temp, 2);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2202      	movs	r2, #2
 8001706:	4619      	mov	r1, r3
 8001708:	4824      	ldr	r0, [pc, #144]	; (800179c <uart_protocal+0x5c4>)
 800170a:	f7ff fd1d 	bl	8001148 <UARTTxWrite>
						uint8_t temp2[] = {0b10011011,(uint8_t)max_velocity,~(0b10011011+(uint8_t)max_velocity) & 0xFF};
 800170e:	239b      	movs	r3, #155	; 0x9b
 8001710:	763b      	strb	r3, [r7, #24]
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <uart_protocal+0x5bc>)
 8001714:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001718:	4618      	mov	r0, r3
 800171a:	4621      	mov	r1, r4
 800171c:	f7ff f932 	bl	8000984 <__aeabi_d2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	767b      	strb	r3, [r7, #25]
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <uart_protocal+0x5bc>)
 8001728:	e9d3 3400 	ldrd	r3, r4, [r3]
 800172c:	4618      	mov	r0, r3
 800172e:	4621      	mov	r1, r4
 8001730:	f7ff f928 	bl	8000984 <__aeabi_d2uiz>
 8001734:	4603      	mov	r3, r0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b65      	subs	r3, #101	; 0x65
 800173a:	b2db      	uxtb	r3, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	76bb      	strb	r3, [r7, #26]
						UARTTxWrite(&UART2, temp2, 3);
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	2203      	movs	r2, #3
 8001748:	4619      	mov	r1, r3
 800174a:	4814      	ldr	r0, [pc, #80]	; (800179c <uart_protocal+0x5c4>)
 800174c:	f7ff fcfc 	bl	8001148 <UARTTxWrite>
						state = state_wait_for_ack1_1;
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <uart_protocal+0x5c8>)
 8001752:	2206      	movs	r2, #6
 8001754:	701a      	strb	r2, [r3, #0]
						break;
 8001756:	bf00      	nop
 8001758:	e057      	b.n	800180a <uart_protocal+0x632>
					}
					case 12:{
						enable_gripper = 1;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <uart_protocal+0x5e8>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <uart_protocal+0x5c0>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	82bb      	strh	r3, [r7, #20]
						UARTTxWrite(&UART2, temp, 2);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	2202      	movs	r2, #2
 800176c:	4619      	mov	r1, r3
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <uart_protocal+0x5c4>)
 8001770:	f7ff fcea 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <uart_protocal+0x5c8>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
						break;
 800177a:	bf00      	nop
 800177c:	e045      	b.n	800180a <uart_protocal+0x632>
 800177e:	bf00      	nop
 8001780:	eb1c432d 	.word	0xeb1c432d
 8001784:	3f1a36e2 	.word	0x3f1a36e2
 8001788:	00000000 	.word	0x00000000
 800178c:	40c38800 	.word	0x40c38800
 8001790:	200002cc 	.word	0x200002cc
 8001794:	200002b8 	.word	0x200002b8
 8001798:	08004334 	.word	0x08004334
 800179c:	20000094 	.word	0x20000094
 80017a0:	200002c8 	.word	0x200002c8
 80017a4:	200002c0 	.word	0x200002c0
 80017a8:	200000b0 	.word	0x200000b0
 80017ac:	200002b4 	.word	0x200002b4
 80017b0:	200003cd 	.word	0x200003cd
 80017b4:	200002b0 	.word	0x200002b0
 80017b8:	200002b1 	.word	0x200002b1
 80017bc:	20000000 	.word	0x20000000
 80017c0:	200002b2 	.word	0x200002b2
					}
					case 13:{
						enable_gripper = 0;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <uart_protocal+0x668>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <uart_protocal+0x66c>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	823b      	strh	r3, [r7, #16]
						UARTTxWrite(&UART2, temp, 2);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2202      	movs	r2, #2
 80017d6:	4619      	mov	r1, r3
 80017d8:	481b      	ldr	r0, [pc, #108]	; (8001848 <uart_protocal+0x670>)
 80017da:	f7ff fcb5 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <uart_protocal+0x674>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
						break;
 80017e4:	bf00      	nop
 80017e6:	e010      	b.n	800180a <uart_protocal+0x632>
					}
					case 14:{
						enable_sethome = 1;
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <uart_protocal+0x678>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
						uint8_t temp[] = {0x58,0b01110101};
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <uart_protocal+0x66c>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	81bb      	strh	r3, [r7, #12]
						UARTTxWrite(&UART2, temp, 2);
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2202      	movs	r2, #2
 80017fa:	4619      	mov	r1, r3
 80017fc:	4812      	ldr	r0, [pc, #72]	; (8001848 <uart_protocal+0x670>)
 80017fe:	f7ff fca3 	bl	8001148 <UARTTxWrite>
						state = state_idle;
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <uart_protocal+0x674>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
						break;
 8001808:	bf00      	nop
				}
			}
			else{
				//error check sum
			}
			break;
 800180a:	e00f      	b.n	800182c <uart_protocal+0x654>
		case state_wait_for_ack1_1:{if(input == 0x58){state = state_wait_for_ack1_2;}break;}
 800180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001810:	2b58      	cmp	r3, #88	; 0x58
 8001812:	d10d      	bne.n	8001830 <uart_protocal+0x658>
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <uart_protocal+0x674>)
 8001816:	2207      	movs	r2, #7
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e009      	b.n	8001830 <uart_protocal+0x658>
		case state_wait_for_ack1_2:{if(input == 0b01110101){state = state_idle;}break;}
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	2b75      	cmp	r3, #117	; 0x75
 8001822:	d107      	bne.n	8001834 <uart_protocal+0x65c>
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <uart_protocal+0x674>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e003      	b.n	8001834 <uart_protocal+0x65c>
			break;
 800182c:	bf00      	nop
 800182e:	e002      	b.n	8001836 <uart_protocal+0x65e>
		case state_wait_for_ack1_1:{if(input == 0x58){state = state_wait_for_ack1_2;}break;}
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <uart_protocal+0x65e>
		case state_wait_for_ack1_2:{if(input == 0b01110101){state = state_idle;}break;}
 8001834:	bf00      	nop
	}

}
 8001836:	bf00      	nop
 8001838:	375c      	adds	r7, #92	; 0x5c
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	200002b2 	.word	0x200002b2
 8001844:	08004334 	.word	0x08004334
 8001848:	20000094 	.word	0x20000094
 800184c:	200002c8 	.word	0x200002c8
 8001850:	200002b3 	.word	0x200002b3

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185a:	e7fe      	b.n	800185a <Error_Handler+0x6>

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_MspInit+0x4c>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_MspInit+0x4c>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800189a:	2007      	movs	r0, #7
 800189c:	f000 fabc 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_UART_MspInit+0x150>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f040 8091 	bne.w	80019f2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_UART_MspInit+0x154>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a49      	ldr	r2, [pc, #292]	; (8001a00 <HAL_UART_MspInit+0x154>)
 80018da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
 80018e0:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <HAL_UART_MspInit+0x154>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_UART_MspInit+0x154>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a42      	ldr	r2, [pc, #264]	; (8001a00 <HAL_UART_MspInit+0x154>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HAL_UART_MspInit+0x154>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001908:	230c      	movs	r3, #12
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001918:	2307      	movs	r3, #7
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4838      	ldr	r0, [pc, #224]	; (8001a04 <HAL_UART_MspInit+0x158>)
 8001924:	f000 fe4a 	bl	80025bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001928:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 800192a:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_UART_MspInit+0x160>)
 800192c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001934:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193c:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001948:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800196a:	4827      	ldr	r0, [pc, #156]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 800196c:	f000 fa96 	bl	8001e9c <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001976:	f7ff ff6d 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <HAL_UART_MspInit+0x15c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_UART_MspInit+0x164>)
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <HAL_UART_MspInit+0x168>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_UART_MspInit+0x164>)
 800198e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001992:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_UART_MspInit+0x164>)
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_UART_MspInit+0x164>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019c6:	4812      	ldr	r0, [pc, #72]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019c8:	f000 fa68 	bl	8001e9c <HAL_DMA_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80019d2:	f7ff ff3f 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
 80019dc:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_UART_MspInit+0x164>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2026      	movs	r0, #38	; 0x26
 80019e8:	f000 fa21 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ec:	2026      	movs	r0, #38	; 0x26
 80019ee:	f000 fa3a 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40004400 	.word	0x40004400
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	200003dc 	.word	0x200003dc
 8001a0c:	40026088 	.word	0x40026088
 8001a10:	2000043c 	.word	0x2000043c
 8001a14:	400260a0 	.word	0x400260a0

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f8e8 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <DMA1_Stream5_IRQHandler+0x10>)
 8001a72:	f000 fb3b 	bl	80020ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200003dc 	.word	0x200003dc

08001a80 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA1_Stream6_IRQHandler+0x10>)
 8001a86:	f000 fb31 	bl	80020ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000043c 	.word	0x2000043c

08001a94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <USART2_IRQHandler+0x10>)
 8001a9a:	f001 fcc7 	bl	800342c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000049c 	.word	0x2000049c

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f002 fb58 	bl	800418c <__errno>
 8001adc:	4602      	mov	r2, r0
 8001ade:	230c      	movs	r3, #12
 8001ae0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20020000 	.word	0x20020000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	200003d0 	.word	0x200003d0
 8001b10:	200004e8 	.word	0x200004e8

08001b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <SystemInit+0x28>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <SystemInit+0x28>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SystemInit+0x28>)
 8001b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b46:	e003      	b.n	8001b50 <LoopCopyDataInit>

08001b48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b4e:	3104      	adds	r1, #4

08001b50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b58:	d3f6      	bcc.n	8001b48 <CopyDataInit>
  ldr  r2, =_sbss
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b5c:	e002      	b.n	8001b64 <LoopFillZerobss>

08001b5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b60:	f842 3b04 	str.w	r3, [r2], #4

08001b64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b68:	d3f9      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b6a:	f7ff ffd3 	bl	8001b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f002 fb13 	bl	8004198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff f8a7 	bl	8000cc4 <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b7c:	08004368 	.word	0x08004368
  ldr  r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b84:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001b88:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001b8c:	200004e4 	.word	0x200004e4

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_Init+0x40>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_Init+0x40>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x40>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f92b 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fe48 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f943 	bl	8001e82 <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f90b 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000010 	.word	0x20000010
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000010 	.word	0x20000010
 8001c5c:	200004dc 	.word	0x200004dc

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	200004dc 	.word	0x200004dc

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff29 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff3e 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff31 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff feda 	bl	8001c60 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e099      	b.n	8001fec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed8:	e00f      	b.n	8001efa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eda:	f7ff fec1 	bl	8001c60 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d908      	bls.n	8001efa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e078      	b.n	8001fec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e8      	bne.n	8001eda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_DMA_Init+0x158>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d107      	bne.n	8001f64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f023 0307 	bic.w	r3, r3, #7
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d117      	bne.n	8001fbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fa91 	bl	80024c8 <DMA_CheckFifoParam>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e016      	b.n	8001fec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fa48 	bl	800245c <DMA_CalcBaseAndBitshift>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	223f      	movs	r2, #63	; 0x3f
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f010803f 	.word	0xf010803f

08001ff8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_DMA_Start_IT+0x26>
 800201a:	2302      	movs	r3, #2
 800201c:	e040      	b.n	80020a0 <HAL_DMA_Start_IT+0xa8>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d12f      	bne.n	8002092 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2202      	movs	r2, #2
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f9da 	bl	8002400 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	223f      	movs	r2, #63	; 0x3f
 8002052:	409a      	lsls	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0216 	orr.w	r2, r2, #22
 8002066:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0208 	orr.w	r2, r2, #8
 800207e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e005      	b.n	800209e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800209a:	2302      	movs	r3, #2
 800209c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00c      	b.n	80020e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2205      	movs	r2, #5
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020f8:	4b92      	ldr	r3, [pc, #584]	; (8002344 <HAL_DMA_IRQHandler+0x258>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a92      	ldr	r2, [pc, #584]	; (8002348 <HAL_DMA_IRQHandler+0x25c>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0a9b      	lsrs	r3, r3, #10
 8002104:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2208      	movs	r2, #8
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01a      	beq.n	8002158 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2208      	movs	r2, #8
 8002146:	409a      	lsls	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2201      	movs	r2, #1
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2201      	movs	r2, #1
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2204      	movs	r2, #4
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2204      	movs	r2, #4
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0204 	orr.w	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	2210      	movs	r2, #16
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d043      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03c      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2210      	movs	r2, #16
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d018      	beq.n	800222e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d024      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
 800221a:	e01f      	b.n	800225c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01b      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e016      	b.n	800225c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0208 	bic.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	2220      	movs	r2, #32
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 808e 	beq.w	800238a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8086 	beq.w	800238a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2220      	movs	r2, #32
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b05      	cmp	r3, #5
 8002294:	d136      	bne.n	8002304 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0216 	bic.w	r2, r2, #22
 80022a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x1da>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0208 	bic.w	r2, r2, #8
 80022d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	223f      	movs	r2, #63	; 0x3f
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d07d      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
        }
        return;
 8002302:	e078      	b.n	80023f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01c      	beq.n	800234c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d108      	bne.n	8002332 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	2b00      	cmp	r3, #0
 8002326:	d030      	beq.n	800238a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
 8002330:	e02b      	b.n	800238a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d027      	beq.n	800238a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
 8002342:	e022      	b.n	800238a <HAL_DMA_IRQHandler+0x29e>
 8002344:	20000008 	.word	0x20000008
 8002348:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10f      	bne.n	800237a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0210 	bic.w	r2, r2, #16
 8002368:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	2b00      	cmp	r3, #0
 8002390:	d032      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d022      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3301      	adds	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d307      	bcc.n	80023d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f2      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x2ca>
 80023d0:	e000      	b.n	80023d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e000      	b.n	80023f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023f6:	bf00      	nop
    }
  }
}
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop

08002400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800241c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d108      	bne.n	8002440 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800243e:	e007      	b.n	8002450 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3b10      	subs	r3, #16
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <DMA_CalcBaseAndBitshift+0x64>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d909      	bls.n	800249e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	1d1a      	adds	r2, r3, #4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
 800249c:	e007      	b.n	80024ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	aaaaaaab 	.word	0xaaaaaaab
 80024c4:	08004350 	.word	0x08004350

080024c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11f      	bne.n	8002522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d855      	bhi.n	8002594 <DMA_CheckFifoParam+0xcc>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <DMA_CheckFifoParam+0x28>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002501 	.word	0x08002501
 80024f4:	08002513 	.word	0x08002513
 80024f8:	08002501 	.word	0x08002501
 80024fc:	08002595 	.word	0x08002595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d045      	beq.n	8002598 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e042      	b.n	8002598 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800251a:	d13f      	bne.n	800259c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e03c      	b.n	800259c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	d121      	bne.n	8002570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d836      	bhi.n	80025a0 <DMA_CheckFifoParam+0xd8>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <DMA_CheckFifoParam+0x70>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002549 	.word	0x08002549
 800253c:	0800254f 	.word	0x0800254f
 8002540:	08002549 	.word	0x08002549
 8002544:	08002561 	.word	0x08002561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e02f      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d024      	beq.n	80025a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255e:	e021      	b.n	80025a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002568:	d11e      	bne.n	80025a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800256e:	e01b      	b.n	80025a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d902      	bls.n	800257c <DMA_CheckFifoParam+0xb4>
 8002576:	2b03      	cmp	r3, #3
 8002578:	d003      	beq.n	8002582 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800257a:	e018      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      break;
 8002580:	e015      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00e      	beq.n	80025ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      break;
 8002592:	e00b      	b.n	80025ac <DMA_CheckFifoParam+0xe4>
      break;
 8002594:	bf00      	nop
 8002596:	e00a      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 8002598:	bf00      	nop
 800259a:	e008      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 800259c:	bf00      	nop
 800259e:	e006      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 80025a0:	bf00      	nop
 80025a2:	e004      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 80025a4:	bf00      	nop
 80025a6:	e002      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;   
 80025a8:	bf00      	nop
 80025aa:	e000      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 80025ac:	bf00      	nop
    }
  } 
  
  return status; 
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e159      	b.n	800288c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8148 	bne.w	8002886 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d00b      	beq.n	8002616 <HAL_GPIO_Init+0x5a>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800260a:	2b11      	cmp	r3, #17
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b12      	cmp	r3, #18
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0xfc>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b12      	cmp	r3, #18
 80026b6:	d123      	bne.n	8002700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	08da      	lsrs	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a2 	beq.w	8002886 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <HAL_GPIO_Init+0x2e4>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_GPIO_Init+0x2e4>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_GPIO_Init+0x2e4>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275e:	4a51      	ldr	r2, [pc, #324]	; (80028a4 <HAL_GPIO_Init+0x2e8>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a48      	ldr	r2, [pc, #288]	; (80028a8 <HAL_GPIO_Init+0x2ec>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d019      	beq.n	80027be <HAL_GPIO_Init+0x202>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_GPIO_Init+0x2f0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x1fe>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a46      	ldr	r2, [pc, #280]	; (80028b0 <HAL_GPIO_Init+0x2f4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x1fa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a45      	ldr	r2, [pc, #276]	; (80028b4 <HAL_GPIO_Init+0x2f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x1f6>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a44      	ldr	r2, [pc, #272]	; (80028b8 <HAL_GPIO_Init+0x2fc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x1f2>
 80027aa:	2304      	movs	r3, #4
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x204>
 80027ae:	2307      	movs	r3, #7
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x204>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x204>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x204>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x204>
 80027be:	2300      	movs	r3, #0
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	4934      	ldr	r1, [pc, #208]	; (80028a4 <HAL_GPIO_Init+0x2e8>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <HAL_GPIO_Init+0x300>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002802:	4a2e      	ldr	r2, [pc, #184]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002808:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_GPIO_Init+0x300>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <HAL_GPIO_Init+0x300>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002856:	4a19      	ldr	r2, [pc, #100]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_GPIO_Init+0x300>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002880:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	f67f aea2 	bls.w	80025d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002894:	bf00      	nop
 8002896:	3724      	adds	r7, #36	; 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e25b      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d075      	beq.n	80029fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002912:	4ba3      	ldr	r3, [pc, #652]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00c      	beq.n	8002938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	2b08      	cmp	r3, #8
 8002928:	d112      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4b9d      	ldr	r3, [pc, #628]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002936:	d10b      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	4b99      	ldr	r3, [pc, #612]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05b      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d157      	bne.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e236      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x74>
 800295a:	4b91      	ldr	r3, [pc, #580]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a90      	ldr	r2, [pc, #576]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e01d      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x98>
 8002972:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a8a      	ldr	r2, [pc, #552]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a87      	ldr	r2, [pc, #540]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 800298c:	4b84      	ldr	r3, [pc, #528]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a83      	ldr	r2, [pc, #524]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b81      	ldr	r3, [pc, #516]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a80      	ldr	r2, [pc, #512]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff f958 	bl	8001c60 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7ff f954 	bl	8001c60 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1fb      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff f944 	bl	8001c60 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff f940 	bl	8001c60 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1e7      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d063      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d11c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e1bb      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4952      	ldr	r1, [pc, #328]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	e03a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a64:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <HAL_RCC_OscConfig+0x2b0>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff f8f9 	bl	8001c60 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a72:	f7ff f8f5 	bl	8001c60 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e19c      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4940      	ldr	r1, [pc, #256]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_RCC_OscConfig+0x2b0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff f8d8 	bl	8001c60 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7ff f8d4 	bl	8001c60 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e17b      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d030      	beq.n	8002b40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x2b4>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff f8b8 	bl	8001c60 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af4:	f7ff f8b4 	bl	8001c60 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e15b      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x200>
 8002b12:	e015      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x2b4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f8a1 	bl	8001c60 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b22:	f7ff f89d 	bl	8001c60 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e144      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a0 	beq.w	8002c8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x2b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d121      	bne.n	8002bce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCC_OscConfig+0x2b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_RCC_OscConfig+0x2b8>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7ff f863 	bl	8001c60 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	e011      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2ce>
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470000 	.word	0x42470000
 8002ba8:	42470e80 	.word	0x42470e80
 8002bac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7ff f856 	bl	8001c60 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0fd      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCC_OscConfig+0x4d4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a7c      	ldr	r2, [pc, #496]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
 8002be2:	e01c      	b.n	8002c1e <HAL_RCC_OscConfig+0x32a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x312>
 8002bec:	4b77      	ldr	r3, [pc, #476]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a76      	ldr	r2, [pc, #472]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a73      	ldr	r2, [pc, #460]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0x32a>
 8002c06:	4b71      	ldr	r3, [pc, #452]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a70      	ldr	r2, [pc, #448]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	4b6e      	ldr	r3, [pc, #440]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a6d      	ldr	r2, [pc, #436]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7ff f81b 	bl	8001c60 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7ff f817 	bl	8001c60 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0bc      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCC_OscConfig+0x33a>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7ff f805 	bl	8001c60 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7ff f801 	bl	8001c60 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0a6      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	4b56      	ldr	r3, [pc, #344]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b52      	ldr	r3, [pc, #328]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a51      	ldr	r2, [pc, #324]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8092 	beq.w	8002dbc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c98:	4b4c      	ldr	r3, [pc, #304]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d05c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d141      	bne.n	8002d30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <HAL_RCC_OscConfig+0x4dc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe ffd5 	bl	8001c60 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fe ffd1 	bl	8001c60 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e078      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	019b      	lsls	r3, r3, #6
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	4933      	ldr	r1, [pc, #204]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <HAL_RCC_OscConfig+0x4dc>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe ffaa 	bl	8001c60 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe ffa6 	bl	8001c60 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e04d      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x41c>
 8002d2e:	e045      	b.n	8002dbc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x4dc>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe ff93 	bl	8001c60 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe ff8f 	bl	8001c60 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e036      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x44a>
 8002d5c:	e02e      	b.n	8002dbc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e029      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_RCC_OscConfig+0x4d8>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d11c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d115      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d92:	4013      	ands	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10d      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	42470060 	.word	0x42470060

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cc      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d90c      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b65      	ldr	r3, [pc, #404]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	494d      	ldr	r1, [pc, #308]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d044      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d119      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e067      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b37      	ldr	r3, [pc, #220]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4934      	ldr	r1, [pc, #208]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe fecc 	bl	8001c60 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fe fec8 	bl	8001c60 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e04f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d20c      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e032      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4916      	ldr	r1, [pc, #88]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	490e      	ldr	r1, [pc, #56]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f5a:	f000 f821 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	5cd3      	ldrb	r3, [r2, r3]
 8002f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fe2c 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08004338 	.word	0x08004338
 8002f98:	20000008 	.word	0x20000008
 8002f9c:	2000000c 	.word	0x2000000c

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d007      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x32>
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x38>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 80b4 	bne.w	8003134 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fce:	60bb      	str	r3, [r7, #8]
       break;
 8002fd0:	e0b3      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd2:	4b5e      	ldr	r3, [pc, #376]	; (800314c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002fd4:	60bb      	str	r3, [r7, #8]
      break;
 8002fd6:	e0b0      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe2:	4b58      	ldr	r3, [pc, #352]	; (8003144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d04a      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b55      	ldr	r3, [pc, #340]	; (8003144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	f04f 0400 	mov.w	r4, #0
 8002ff8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	ea03 0501 	and.w	r5, r3, r1
 8003004:	ea04 0602 	and.w	r6, r4, r2
 8003008:	4629      	mov	r1, r5
 800300a:	4632      	mov	r2, r6
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	f04f 0400 	mov.w	r4, #0
 8003014:	0154      	lsls	r4, r2, #5
 8003016:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800301a:	014b      	lsls	r3, r1, #5
 800301c:	4619      	mov	r1, r3
 800301e:	4622      	mov	r2, r4
 8003020:	1b49      	subs	r1, r1, r5
 8003022:	eb62 0206 	sbc.w	r2, r2, r6
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	f04f 0400 	mov.w	r4, #0
 800302e:	0194      	lsls	r4, r2, #6
 8003030:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003034:	018b      	lsls	r3, r1, #6
 8003036:	1a5b      	subs	r3, r3, r1
 8003038:	eb64 0402 	sbc.w	r4, r4, r2
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	00e2      	lsls	r2, r4, #3
 8003046:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800304a:	00d9      	lsls	r1, r3, #3
 800304c:	460b      	mov	r3, r1
 800304e:	4614      	mov	r4, r2
 8003050:	195b      	adds	r3, r3, r5
 8003052:	eb44 0406 	adc.w	r4, r4, r6
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	0262      	lsls	r2, r4, #9
 8003060:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003064:	0259      	lsls	r1, r3, #9
 8003066:	460b      	mov	r3, r1
 8003068:	4614      	mov	r4, r2
 800306a:	4618      	mov	r0, r3
 800306c:	4621      	mov	r1, r4
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	461a      	mov	r2, r3
 8003076:	4623      	mov	r3, r4
 8003078:	f7fd fca4 	bl	80009c4 <__aeabi_uldivmod>
 800307c:	4603      	mov	r3, r0
 800307e:	460c      	mov	r4, r1
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e049      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	f04f 0400 	mov.w	r4, #0
 800308e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	ea03 0501 	and.w	r5, r3, r1
 800309a:	ea04 0602 	and.w	r6, r4, r2
 800309e:	4629      	mov	r1, r5
 80030a0:	4632      	mov	r2, r6
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	f04f 0400 	mov.w	r4, #0
 80030aa:	0154      	lsls	r4, r2, #5
 80030ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030b0:	014b      	lsls	r3, r1, #5
 80030b2:	4619      	mov	r1, r3
 80030b4:	4622      	mov	r2, r4
 80030b6:	1b49      	subs	r1, r1, r5
 80030b8:	eb62 0206 	sbc.w	r2, r2, r6
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	f04f 0400 	mov.w	r4, #0
 80030c4:	0194      	lsls	r4, r2, #6
 80030c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030ca:	018b      	lsls	r3, r1, #6
 80030cc:	1a5b      	subs	r3, r3, r1
 80030ce:	eb64 0402 	sbc.w	r4, r4, r2
 80030d2:	f04f 0100 	mov.w	r1, #0
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030e0:	00d9      	lsls	r1, r3, #3
 80030e2:	460b      	mov	r3, r1
 80030e4:	4614      	mov	r4, r2
 80030e6:	195b      	adds	r3, r3, r5
 80030e8:	eb44 0406 	adc.w	r4, r4, r6
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	02a2      	lsls	r2, r4, #10
 80030f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030fa:	0299      	lsls	r1, r3, #10
 80030fc:	460b      	mov	r3, r1
 80030fe:	4614      	mov	r4, r2
 8003100:	4618      	mov	r0, r3
 8003102:	4621      	mov	r1, r4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f04f 0400 	mov.w	r4, #0
 800310a:	461a      	mov	r2, r3
 800310c:	4623      	mov	r3, r4
 800310e:	f7fd fc59 	bl	80009c4 <__aeabi_uldivmod>
 8003112:	4603      	mov	r3, r0
 8003114:	460c      	mov	r4, r1
 8003116:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	3301      	adds	r3, #1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	60bb      	str	r3, [r7, #8]
      break;
 8003132:	e002      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003136:	60bb      	str	r3, [r7, #8]
      break;
 8003138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313a:	68bb      	ldr	r3, [r7, #8]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	00f42400 	.word	0x00f42400
 800314c:	007a1200 	.word	0x007a1200

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000008 	.word	0x20000008

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800316c:	f7ff fff0 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003170:	4601      	mov	r1, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	08004348 	.word	0x08004348

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003194:	f7ff ffdc 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003198:	4601      	mov	r1, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4a03      	ldr	r2, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08004348 	.word	0x08004348

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e03f      	b.n	800324a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe fb64 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fc41 	bl	8003a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d153      	bne.n	8003316 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_Transmit_DMA+0x26>
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e04c      	b.n	8003318 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_UART_Transmit_DMA+0x38>
 8003288:	2302      	movs	r3, #2
 800328a:	e045      	b.n	8003318 <HAL_UART_Transmit_DMA+0xc4>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2221      	movs	r2, #33	; 0x21
 80032b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_UART_Transmit_DMA+0xcc>)
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_UART_Transmit_DMA+0xd0>)
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a17      	ldr	r2, [pc, #92]	; (8003328 <HAL_UART_Transmit_DMA+0xd4>)
 80032ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2200      	movs	r2, #0
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3304      	adds	r3, #4
 80032e8:	461a      	mov	r2, r3
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	f7fe fe84 	bl	8001ff8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003310:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	08003691 	.word	0x08003691
 8003324:	080036e3 	.word	0x080036e3
 8003328:	08003783 	.word	0x08003783

0800332c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	d166      	bne.n	8003414 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_UART_Receive_DMA+0x26>
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e05f      	b.n	8003416 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_UART_Receive_DMA+0x38>
 8003360:	2302      	movs	r3, #2
 8003362:	e058      	b.n	8003416 <HAL_UART_Receive_DMA+0xea>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2222      	movs	r2, #34	; 0x22
 8003382:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	4a25      	ldr	r2, [pc, #148]	; (8003420 <HAL_UART_Receive_DMA+0xf4>)
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	4a24      	ldr	r2, [pc, #144]	; (8003424 <HAL_UART_Receive_DMA+0xf8>)
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_UART_Receive_DMA+0xfc>)
 800339c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	2200      	movs	r2, #0
 80033a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80033a6:	f107 0308 	add.w	r3, r7, #8
 80033aa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	f7fe fe1b 	bl	8001ff8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	080036ff 	.word	0x080036ff
 8003424:	08003767 	.word	0x08003767
 8003428:	08003783 	.word	0x08003783

0800342c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0x52>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa83 	bl	8003982 <UART_Receive_IT>
      return;
 800347c:	e0d1      	b.n	8003622 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80b0 	beq.w	80035e6 <HAL_UART_IRQHandler+0x1ba>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_UART_IRQHandler+0x70>
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80a5 	beq.w	80035e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_UART_IRQHandler+0x90>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_UART_IRQHandler+0xb0>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	f043 0202 	orr.w	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_UART_IRQHandler+0xd0>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	f043 0204 	orr.w	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00f      	beq.n	8003526 <HAL_UART_IRQHandler+0xfa>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_UART_IRQHandler+0xee>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	f043 0208 	orr.w	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d078      	beq.n	8003620 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa1d 	bl	8003982 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_UART_IRQHandler+0x144>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f966 	bl	8003842 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d123      	bne.n	80035cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003592:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <HAL_UART_IRQHandler+0x1fc>)
 80035a2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fd7d 	bl	80020a8 <HAL_DMA_Abort_IT>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d016      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035be:	4610      	mov	r0, r2
 80035c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c2:	e00e      	b.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f859 	bl	800367c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	e00a      	b.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f855 	bl	800367c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d2:	e006      	b.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f851 	bl	800367c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035e0:	e01e      	b.n	8003620 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e2:	bf00      	nop
    return;
 80035e4:	e01c      	b.n	8003620 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_UART_IRQHandler+0x1d6>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f953 	bl	80038a6 <UART_Transmit_IT>
    return;
 8003600:	e00f      	b.n	8003622 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_UART_IRQHandler+0x1f6>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f99b 	bl	8003952 <UART_EndTransmit_IT>
    return;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003620:	bf00      	nop
  }
}
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	0800387f 	.word	0x0800387f

0800362c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d113      	bne.n	80036d4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036d2:	e002      	b.n	80036da <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ffa9 	bl	800362c <HAL_UART_TxCpltCallback>
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff ffa5 	bl	8003640 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11e      	bne.n	8003758 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff ff7b 	bl	8003654 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff ff77 	bl	8003668 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b21      	cmp	r3, #33	; 0x21
 80037b4:	d108      	bne.n	80037c8 <UART_DMAError+0x46>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	f000 f827 	bl	8003816 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b22      	cmp	r3, #34	; 0x22
 80037e8:	d108      	bne.n	80037fc <UART_DMAError+0x7a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037f6:	68b8      	ldr	r0, [r7, #8]
 80037f8:	f000 f823 	bl	8003842 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	f043 0210 	orr.w	r2, r3, #16
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003808:	68b8      	ldr	r0, [r7, #8]
 800380a:	f7ff ff37 	bl	800367c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800382c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003858:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff feef 	bl	800367c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b21      	cmp	r3, #33	; 0x21
 80038b8:	d144      	bne.n	8003944 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	d11a      	bne.n	80038fa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	1c9a      	adds	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	621a      	str	r2, [r3, #32]
 80038ec:	e00e      	b.n	800390c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	621a      	str	r2, [r3, #32]
 80038f8:	e008      	b.n	800390c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6211      	str	r1, [r2, #32]
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29b      	uxth	r3, r3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4619      	mov	r1, r3
 800391a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10f      	bne.n	8003940 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800392e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003968:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fe5a 	bl	800362c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	d171      	bne.n	8003a7a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	d123      	bne.n	80039e8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10e      	bne.n	80039cc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
 80039ca:	e029      	b.n	8003a20 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
 80039e6:	e01b      	b.n	8003a20 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6858      	ldr	r0, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	1c59      	adds	r1, r3, #1
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6291      	str	r1, [r2, #40]	; 0x28
 8003a00:	b2c2      	uxtb	r2, r0
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e00c      	b.n	8003a20 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	1c58      	adds	r0, r3, #1
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	6288      	str	r0, [r1, #40]	; 0x28
 8003a18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d120      	bne.n	8003a76 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0220 	bic.w	r2, r2, #32
 8003a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff fdf1 	bl	8003654 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e002      	b.n	8003a7c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ac6:	f023 030c 	bic.w	r3, r3, #12
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af2:	f040 818b 	bne.w	8003e0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4ac1      	ldr	r2, [pc, #772]	; (8003e00 <UART_SetConfig+0x37c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d005      	beq.n	8003b0c <UART_SetConfig+0x88>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4abf      	ldr	r2, [pc, #764]	; (8003e04 <UART_SetConfig+0x380>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	f040 80bd 	bne.w	8003c86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b0c:	f7ff fb40 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8003b10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	461d      	mov	r5, r3
 8003b16:	f04f 0600 	mov.w	r6, #0
 8003b1a:	46a8      	mov	r8, r5
 8003b1c:	46b1      	mov	r9, r6
 8003b1e:	eb18 0308 	adds.w	r3, r8, r8
 8003b22:	eb49 0409 	adc.w	r4, r9, r9
 8003b26:	4698      	mov	r8, r3
 8003b28:	46a1      	mov	r9, r4
 8003b2a:	eb18 0805 	adds.w	r8, r8, r5
 8003b2e:	eb49 0906 	adc.w	r9, r9, r6
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b46:	4688      	mov	r8, r1
 8003b48:	4691      	mov	r9, r2
 8003b4a:	eb18 0005 	adds.w	r0, r8, r5
 8003b4e:	eb49 0106 	adc.w	r1, r9, r6
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	461d      	mov	r5, r3
 8003b58:	f04f 0600 	mov.w	r6, #0
 8003b5c:	196b      	adds	r3, r5, r5
 8003b5e:	eb46 0406 	adc.w	r4, r6, r6
 8003b62:	461a      	mov	r2, r3
 8003b64:	4623      	mov	r3, r4
 8003b66:	f7fc ff2d 	bl	80009c4 <__aeabi_uldivmod>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4ba5      	ldr	r3, [pc, #660]	; (8003e08 <UART_SetConfig+0x384>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	461d      	mov	r5, r3
 8003b80:	f04f 0600 	mov.w	r6, #0
 8003b84:	46a9      	mov	r9, r5
 8003b86:	46b2      	mov	sl, r6
 8003b88:	eb19 0309 	adds.w	r3, r9, r9
 8003b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b90:	4699      	mov	r9, r3
 8003b92:	46a2      	mov	sl, r4
 8003b94:	eb19 0905 	adds.w	r9, r9, r5
 8003b98:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bb0:	4689      	mov	r9, r1
 8003bb2:	4692      	mov	sl, r2
 8003bb4:	eb19 0005 	adds.w	r0, r9, r5
 8003bb8:	eb4a 0106 	adc.w	r1, sl, r6
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	f04f 0600 	mov.w	r6, #0
 8003bc6:	196b      	adds	r3, r5, r5
 8003bc8:	eb46 0406 	adc.w	r4, r6, r6
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	f7fc fef8 	bl	80009c4 <__aeabi_uldivmod>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <UART_SetConfig+0x384>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2164      	movs	r1, #100	; 0x64
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a86      	ldr	r2, [pc, #536]	; (8003e08 <UART_SetConfig+0x384>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bfc:	4498      	add	r8, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	461d      	mov	r5, r3
 8003c02:	f04f 0600 	mov.w	r6, #0
 8003c06:	46a9      	mov	r9, r5
 8003c08:	46b2      	mov	sl, r6
 8003c0a:	eb19 0309 	adds.w	r3, r9, r9
 8003c0e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c12:	4699      	mov	r9, r3
 8003c14:	46a2      	mov	sl, r4
 8003c16:	eb19 0905 	adds.w	r9, r9, r5
 8003c1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c32:	4689      	mov	r9, r1
 8003c34:	4692      	mov	sl, r2
 8003c36:	eb19 0005 	adds.w	r0, r9, r5
 8003c3a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	461d      	mov	r5, r3
 8003c44:	f04f 0600 	mov.w	r6, #0
 8003c48:	196b      	adds	r3, r5, r5
 8003c4a:	eb46 0406 	adc.w	r4, r6, r6
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4623      	mov	r3, r4
 8003c52:	f7fc feb7 	bl	80009c4 <__aeabi_uldivmod>
 8003c56:	4603      	mov	r3, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b6a      	ldr	r3, [pc, #424]	; (8003e08 <UART_SetConfig+0x384>)
 8003c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2164      	movs	r1, #100	; 0x64
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	3332      	adds	r3, #50	; 0x32
 8003c70:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <UART_SetConfig+0x384>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	f003 0207 	and.w	r2, r3, #7
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4442      	add	r2, r8
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	e26f      	b.n	8004166 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c86:	f7ff fa6f 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8003c8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	461d      	mov	r5, r3
 8003c90:	f04f 0600 	mov.w	r6, #0
 8003c94:	46a8      	mov	r8, r5
 8003c96:	46b1      	mov	r9, r6
 8003c98:	eb18 0308 	adds.w	r3, r8, r8
 8003c9c:	eb49 0409 	adc.w	r4, r9, r9
 8003ca0:	4698      	mov	r8, r3
 8003ca2:	46a1      	mov	r9, r4
 8003ca4:	eb18 0805 	adds.w	r8, r8, r5
 8003ca8:	eb49 0906 	adc.w	r9, r9, r6
 8003cac:	f04f 0100 	mov.w	r1, #0
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cc0:	4688      	mov	r8, r1
 8003cc2:	4691      	mov	r9, r2
 8003cc4:	eb18 0005 	adds.w	r0, r8, r5
 8003cc8:	eb49 0106 	adc.w	r1, r9, r6
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	461d      	mov	r5, r3
 8003cd2:	f04f 0600 	mov.w	r6, #0
 8003cd6:	196b      	adds	r3, r5, r5
 8003cd8:	eb46 0406 	adc.w	r4, r6, r6
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	f7fc fe70 	bl	80009c4 <__aeabi_uldivmod>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <UART_SetConfig+0x384>)
 8003cec:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	f04f 0600 	mov.w	r6, #0
 8003cfe:	46a9      	mov	r9, r5
 8003d00:	46b2      	mov	sl, r6
 8003d02:	eb19 0309 	adds.w	r3, r9, r9
 8003d06:	eb4a 040a 	adc.w	r4, sl, sl
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	46a2      	mov	sl, r4
 8003d0e:	eb19 0905 	adds.w	r9, r9, r5
 8003d12:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d2a:	4689      	mov	r9, r1
 8003d2c:	4692      	mov	sl, r2
 8003d2e:	eb19 0005 	adds.w	r0, r9, r5
 8003d32:	eb4a 0106 	adc.w	r1, sl, r6
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	f04f 0600 	mov.w	r6, #0
 8003d40:	196b      	adds	r3, r5, r5
 8003d42:	eb46 0406 	adc.w	r4, r6, r6
 8003d46:	461a      	mov	r2, r3
 8003d48:	4623      	mov	r3, r4
 8003d4a:	f7fc fe3b 	bl	80009c4 <__aeabi_uldivmod>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <UART_SetConfig+0x384>)
 8003d56:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2164      	movs	r1, #100	; 0x64
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	3332      	adds	r3, #50	; 0x32
 8003d68:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <UART_SetConfig+0x384>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d76:	4498      	add	r8, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	f04f 0600 	mov.w	r6, #0
 8003d80:	46a9      	mov	r9, r5
 8003d82:	46b2      	mov	sl, r6
 8003d84:	eb19 0309 	adds.w	r3, r9, r9
 8003d88:	eb4a 040a 	adc.w	r4, sl, sl
 8003d8c:	4699      	mov	r9, r3
 8003d8e:	46a2      	mov	sl, r4
 8003d90:	eb19 0905 	adds.w	r9, r9, r5
 8003d94:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dac:	4689      	mov	r9, r1
 8003dae:	4692      	mov	sl, r2
 8003db0:	eb19 0005 	adds.w	r0, r9, r5
 8003db4:	eb4a 0106 	adc.w	r1, sl, r6
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	461d      	mov	r5, r3
 8003dbe:	f04f 0600 	mov.w	r6, #0
 8003dc2:	196b      	adds	r3, r5, r5
 8003dc4:	eb46 0406 	adc.w	r4, r6, r6
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	f7fc fdfa 	bl	80009c4 <__aeabi_uldivmod>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <UART_SetConfig+0x384>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2164      	movs	r1, #100	; 0x64
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	3332      	adds	r3, #50	; 0x32
 8003dea:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <UART_SetConfig+0x384>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 0207 	and.w	r2, r3, #7
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4442      	add	r2, r8
 8003dfc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003dfe:	e1b2      	b.n	8004166 <UART_SetConfig+0x6e2>
 8003e00:	40011000 	.word	0x40011000
 8003e04:	40011400 	.word	0x40011400
 8003e08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4ad7      	ldr	r2, [pc, #860]	; (8004170 <UART_SetConfig+0x6ec>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d005      	beq.n	8003e22 <UART_SetConfig+0x39e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4ad6      	ldr	r2, [pc, #856]	; (8004174 <UART_SetConfig+0x6f0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	f040 80d1 	bne.w	8003fc4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e22:	f7ff f9b5 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8003e26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	469a      	mov	sl, r3
 8003e2c:	f04f 0b00 	mov.w	fp, #0
 8003e30:	46d0      	mov	r8, sl
 8003e32:	46d9      	mov	r9, fp
 8003e34:	eb18 0308 	adds.w	r3, r8, r8
 8003e38:	eb49 0409 	adc.w	r4, r9, r9
 8003e3c:	4698      	mov	r8, r3
 8003e3e:	46a1      	mov	r9, r4
 8003e40:	eb18 080a 	adds.w	r8, r8, sl
 8003e44:	eb49 090b 	adc.w	r9, r9, fp
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e5c:	4688      	mov	r8, r1
 8003e5e:	4691      	mov	r9, r2
 8003e60:	eb1a 0508 	adds.w	r5, sl, r8
 8003e64:	eb4b 0609 	adc.w	r6, fp, r9
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	f04f 0400 	mov.w	r4, #0
 8003e7a:	0094      	lsls	r4, r2, #2
 8003e7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e80:	008b      	lsls	r3, r1, #2
 8003e82:	461a      	mov	r2, r3
 8003e84:	4623      	mov	r3, r4
 8003e86:	4628      	mov	r0, r5
 8003e88:	4631      	mov	r1, r6
 8003e8a:	f7fc fd9b 	bl	80009c4 <__aeabi_uldivmod>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	461a      	mov	r2, r3
 8003e94:	4bb8      	ldr	r3, [pc, #736]	; (8004178 <UART_SetConfig+0x6f4>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	469b      	mov	fp, r3
 8003ea4:	f04f 0c00 	mov.w	ip, #0
 8003ea8:	46d9      	mov	r9, fp
 8003eaa:	46e2      	mov	sl, ip
 8003eac:	eb19 0309 	adds.w	r3, r9, r9
 8003eb0:	eb4a 040a 	adc.w	r4, sl, sl
 8003eb4:	4699      	mov	r9, r3
 8003eb6:	46a2      	mov	sl, r4
 8003eb8:	eb19 090b 	adds.w	r9, r9, fp
 8003ebc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ecc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ed0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ed4:	4689      	mov	r9, r1
 8003ed6:	4692      	mov	sl, r2
 8003ed8:	eb1b 0509 	adds.w	r5, fp, r9
 8003edc:	eb4c 060a 	adc.w	r6, ip, sl
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	f04f 0400 	mov.w	r4, #0
 8003ef2:	0094      	lsls	r4, r2, #2
 8003ef4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef8:	008b      	lsls	r3, r1, #2
 8003efa:	461a      	mov	r2, r3
 8003efc:	4623      	mov	r3, r4
 8003efe:	4628      	mov	r0, r5
 8003f00:	4631      	mov	r1, r6
 8003f02:	f7fc fd5f 	bl	80009c4 <__aeabi_uldivmod>
 8003f06:	4603      	mov	r3, r0
 8003f08:	460c      	mov	r4, r1
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b9a      	ldr	r3, [pc, #616]	; (8004178 <UART_SetConfig+0x6f4>)
 8003f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2164      	movs	r1, #100	; 0x64
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	3332      	adds	r3, #50	; 0x32
 8003f20:	4a95      	ldr	r2, [pc, #596]	; (8004178 <UART_SetConfig+0x6f4>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2c:	4498      	add	r8, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	469b      	mov	fp, r3
 8003f32:	f04f 0c00 	mov.w	ip, #0
 8003f36:	46d9      	mov	r9, fp
 8003f38:	46e2      	mov	sl, ip
 8003f3a:	eb19 0309 	adds.w	r3, r9, r9
 8003f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f42:	4699      	mov	r9, r3
 8003f44:	46a2      	mov	sl, r4
 8003f46:	eb19 090b 	adds.w	r9, r9, fp
 8003f4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f62:	4689      	mov	r9, r1
 8003f64:	4692      	mov	sl, r2
 8003f66:	eb1b 0509 	adds.w	r5, fp, r9
 8003f6a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f04f 0400 	mov.w	r4, #0
 8003f80:	0094      	lsls	r4, r2, #2
 8003f82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f86:	008b      	lsls	r3, r1, #2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	4631      	mov	r1, r6
 8003f90:	f7fc fd18 	bl	80009c4 <__aeabi_uldivmod>
 8003f94:	4603      	mov	r3, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b77      	ldr	r3, [pc, #476]	; (8004178 <UART_SetConfig+0x6f4>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	2164      	movs	r1, #100	; 0x64
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	3332      	adds	r3, #50	; 0x32
 8003fae:	4a72      	ldr	r2, [pc, #456]	; (8004178 <UART_SetConfig+0x6f4>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	f003 020f 	and.w	r2, r3, #15
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4442      	add	r2, r8
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	e0d0      	b.n	8004166 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7ff f8d0 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	469a      	mov	sl, r3
 8003fce:	f04f 0b00 	mov.w	fp, #0
 8003fd2:	46d0      	mov	r8, sl
 8003fd4:	46d9      	mov	r9, fp
 8003fd6:	eb18 0308 	adds.w	r3, r8, r8
 8003fda:	eb49 0409 	adc.w	r4, r9, r9
 8003fde:	4698      	mov	r8, r3
 8003fe0:	46a1      	mov	r9, r4
 8003fe2:	eb18 080a 	adds.w	r8, r8, sl
 8003fe6:	eb49 090b 	adc.w	r9, r9, fp
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ff6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ffa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ffe:	4688      	mov	r8, r1
 8004000:	4691      	mov	r9, r2
 8004002:	eb1a 0508 	adds.w	r5, sl, r8
 8004006:	eb4b 0609 	adc.w	r6, fp, r9
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4619      	mov	r1, r3
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	f04f 0400 	mov.w	r4, #0
 800401c:	0094      	lsls	r4, r2, #2
 800401e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004022:	008b      	lsls	r3, r1, #2
 8004024:	461a      	mov	r2, r3
 8004026:	4623      	mov	r3, r4
 8004028:	4628      	mov	r0, r5
 800402a:	4631      	mov	r1, r6
 800402c:	f7fc fcca 	bl	80009c4 <__aeabi_uldivmod>
 8004030:	4603      	mov	r3, r0
 8004032:	460c      	mov	r4, r1
 8004034:	461a      	mov	r2, r3
 8004036:	4b50      	ldr	r3, [pc, #320]	; (8004178 <UART_SetConfig+0x6f4>)
 8004038:	fba3 2302 	umull	r2, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	469b      	mov	fp, r3
 8004046:	f04f 0c00 	mov.w	ip, #0
 800404a:	46d9      	mov	r9, fp
 800404c:	46e2      	mov	sl, ip
 800404e:	eb19 0309 	adds.w	r3, r9, r9
 8004052:	eb4a 040a 	adc.w	r4, sl, sl
 8004056:	4699      	mov	r9, r3
 8004058:	46a2      	mov	sl, r4
 800405a:	eb19 090b 	adds.w	r9, r9, fp
 800405e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004072:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004076:	4689      	mov	r9, r1
 8004078:	4692      	mov	sl, r2
 800407a:	eb1b 0509 	adds.w	r5, fp, r9
 800407e:	eb4c 060a 	adc.w	r6, ip, sl
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4619      	mov	r1, r3
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	f04f 0400 	mov.w	r4, #0
 8004094:	0094      	lsls	r4, r2, #2
 8004096:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800409a:	008b      	lsls	r3, r1, #2
 800409c:	461a      	mov	r2, r3
 800409e:	4623      	mov	r3, r4
 80040a0:	4628      	mov	r0, r5
 80040a2:	4631      	mov	r1, r6
 80040a4:	f7fc fc8e 	bl	80009c4 <__aeabi_uldivmod>
 80040a8:	4603      	mov	r3, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b32      	ldr	r3, [pc, #200]	; (8004178 <UART_SetConfig+0x6f4>)
 80040b0:	fba3 1302 	umull	r1, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	2164      	movs	r1, #100	; 0x64
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	3332      	adds	r3, #50	; 0x32
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <UART_SetConfig+0x6f4>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ce:	4498      	add	r8, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	469b      	mov	fp, r3
 80040d4:	f04f 0c00 	mov.w	ip, #0
 80040d8:	46d9      	mov	r9, fp
 80040da:	46e2      	mov	sl, ip
 80040dc:	eb19 0309 	adds.w	r3, r9, r9
 80040e0:	eb4a 040a 	adc.w	r4, sl, sl
 80040e4:	4699      	mov	r9, r3
 80040e6:	46a2      	mov	sl, r4
 80040e8:	eb19 090b 	adds.w	r9, r9, fp
 80040ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004100:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004104:	4689      	mov	r9, r1
 8004106:	4692      	mov	sl, r2
 8004108:	eb1b 0509 	adds.w	r5, fp, r9
 800410c:	eb4c 060a 	adc.w	r6, ip, sl
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4619      	mov	r1, r3
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	f04f 0400 	mov.w	r4, #0
 8004122:	0094      	lsls	r4, r2, #2
 8004124:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004128:	008b      	lsls	r3, r1, #2
 800412a:	461a      	mov	r2, r3
 800412c:	4623      	mov	r3, r4
 800412e:	4628      	mov	r0, r5
 8004130:	4631      	mov	r1, r6
 8004132:	f7fc fc47 	bl	80009c4 <__aeabi_uldivmod>
 8004136:	4603      	mov	r3, r0
 8004138:	460c      	mov	r4, r1
 800413a:	461a      	mov	r2, r3
 800413c:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <UART_SetConfig+0x6f4>)
 800413e:	fba3 1302 	umull	r1, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2164      	movs	r1, #100	; 0x64
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a09      	ldr	r2, [pc, #36]	; (8004178 <UART_SetConfig+0x6f4>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4442      	add	r2, r8
 8004162:	609a      	str	r2, [r3, #8]
}
 8004164:	e7ff      	b.n	8004166 <UART_SetConfig+0x6e2>
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004170:	40011000 	.word	0x40011000
 8004174:	40011400 	.word	0x40011400
 8004178:	51eb851f 	.word	0x51eb851f

0800417c <calloc>:
 800417c:	4b02      	ldr	r3, [pc, #8]	; (8004188 <calloc+0xc>)
 800417e:	460a      	mov	r2, r1
 8004180:	4601      	mov	r1, r0
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	f000 b83f 	b.w	8004206 <_calloc_r>
 8004188:	20000014 	.word	0x20000014

0800418c <__errno>:
 800418c:	4b01      	ldr	r3, [pc, #4]	; (8004194 <__errno+0x8>)
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000014 	.word	0x20000014

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4e0d      	ldr	r6, [pc, #52]	; (80041d0 <__libc_init_array+0x38>)
 800419c:	4c0d      	ldr	r4, [pc, #52]	; (80041d4 <__libc_init_array+0x3c>)
 800419e:	1ba4      	subs	r4, r4, r6
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2500      	movs	r5, #0
 80041a4:	42a5      	cmp	r5, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4e0b      	ldr	r6, [pc, #44]	; (80041d8 <__libc_init_array+0x40>)
 80041aa:	4c0c      	ldr	r4, [pc, #48]	; (80041dc <__libc_init_array+0x44>)
 80041ac:	f000 f8a6 	bl	80042fc <_init>
 80041b0:	1ba4      	subs	r4, r4, r6
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	2500      	movs	r5, #0
 80041b6:	42a5      	cmp	r5, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041c0:	4798      	blx	r3
 80041c2:	3501      	adds	r5, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041ca:	4798      	blx	r3
 80041cc:	3501      	adds	r5, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	08004360 	.word	0x08004360
 80041d4:	08004360 	.word	0x08004360
 80041d8:	08004360 	.word	0x08004360
 80041dc:	08004364 	.word	0x08004364

080041e0 <memcpy>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	1e43      	subs	r3, r0, #1
 80041e4:	440a      	add	r2, r1
 80041e6:	4291      	cmp	r1, r2
 80041e8:	d100      	bne.n	80041ec <memcpy+0xc>
 80041ea:	bd10      	pop	{r4, pc}
 80041ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f4:	e7f7      	b.n	80041e6 <memcpy+0x6>

080041f6 <memset>:
 80041f6:	4402      	add	r2, r0
 80041f8:	4603      	mov	r3, r0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d100      	bne.n	8004200 <memset+0xa>
 80041fe:	4770      	bx	lr
 8004200:	f803 1b01 	strb.w	r1, [r3], #1
 8004204:	e7f9      	b.n	80041fa <memset+0x4>

08004206 <_calloc_r>:
 8004206:	b538      	push	{r3, r4, r5, lr}
 8004208:	fb02 f401 	mul.w	r4, r2, r1
 800420c:	4621      	mov	r1, r4
 800420e:	f000 f809 	bl	8004224 <_malloc_r>
 8004212:	4605      	mov	r5, r0
 8004214:	b118      	cbz	r0, 800421e <_calloc_r+0x18>
 8004216:	4622      	mov	r2, r4
 8004218:	2100      	movs	r1, #0
 800421a:	f7ff ffec 	bl	80041f6 <memset>
 800421e:	4628      	mov	r0, r5
 8004220:	bd38      	pop	{r3, r4, r5, pc}
	...

08004224 <_malloc_r>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	1ccd      	adds	r5, r1, #3
 8004228:	f025 0503 	bic.w	r5, r5, #3
 800422c:	3508      	adds	r5, #8
 800422e:	2d0c      	cmp	r5, #12
 8004230:	bf38      	it	cc
 8004232:	250c      	movcc	r5, #12
 8004234:	2d00      	cmp	r5, #0
 8004236:	4606      	mov	r6, r0
 8004238:	db01      	blt.n	800423e <_malloc_r+0x1a>
 800423a:	42a9      	cmp	r1, r5
 800423c:	d903      	bls.n	8004246 <_malloc_r+0x22>
 800423e:	230c      	movs	r3, #12
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	2000      	movs	r0, #0
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	f000 f857 	bl	80042f8 <__malloc_lock>
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <_malloc_r+0xac>)
 800424c:	6814      	ldr	r4, [r2, #0]
 800424e:	4621      	mov	r1, r4
 8004250:	b991      	cbnz	r1, 8004278 <_malloc_r+0x54>
 8004252:	4c20      	ldr	r4, [pc, #128]	; (80042d4 <_malloc_r+0xb0>)
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	b91b      	cbnz	r3, 8004260 <_malloc_r+0x3c>
 8004258:	4630      	mov	r0, r6
 800425a:	f000 f83d 	bl	80042d8 <_sbrk_r>
 800425e:	6020      	str	r0, [r4, #0]
 8004260:	4629      	mov	r1, r5
 8004262:	4630      	mov	r0, r6
 8004264:	f000 f838 	bl	80042d8 <_sbrk_r>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d124      	bne.n	80042b6 <_malloc_r+0x92>
 800426c:	230c      	movs	r3, #12
 800426e:	6033      	str	r3, [r6, #0]
 8004270:	4630      	mov	r0, r6
 8004272:	f000 f842 	bl	80042fa <__malloc_unlock>
 8004276:	e7e4      	b.n	8004242 <_malloc_r+0x1e>
 8004278:	680b      	ldr	r3, [r1, #0]
 800427a:	1b5b      	subs	r3, r3, r5
 800427c:	d418      	bmi.n	80042b0 <_malloc_r+0x8c>
 800427e:	2b0b      	cmp	r3, #11
 8004280:	d90f      	bls.n	80042a2 <_malloc_r+0x7e>
 8004282:	600b      	str	r3, [r1, #0]
 8004284:	50cd      	str	r5, [r1, r3]
 8004286:	18cc      	adds	r4, r1, r3
 8004288:	4630      	mov	r0, r6
 800428a:	f000 f836 	bl	80042fa <__malloc_unlock>
 800428e:	f104 000b 	add.w	r0, r4, #11
 8004292:	1d23      	adds	r3, r4, #4
 8004294:	f020 0007 	bic.w	r0, r0, #7
 8004298:	1ac3      	subs	r3, r0, r3
 800429a:	d0d3      	beq.n	8004244 <_malloc_r+0x20>
 800429c:	425a      	negs	r2, r3
 800429e:	50e2      	str	r2, [r4, r3]
 80042a0:	e7d0      	b.n	8004244 <_malloc_r+0x20>
 80042a2:	428c      	cmp	r4, r1
 80042a4:	684b      	ldr	r3, [r1, #4]
 80042a6:	bf16      	itet	ne
 80042a8:	6063      	strne	r3, [r4, #4]
 80042aa:	6013      	streq	r3, [r2, #0]
 80042ac:	460c      	movne	r4, r1
 80042ae:	e7eb      	b.n	8004288 <_malloc_r+0x64>
 80042b0:	460c      	mov	r4, r1
 80042b2:	6849      	ldr	r1, [r1, #4]
 80042b4:	e7cc      	b.n	8004250 <_malloc_r+0x2c>
 80042b6:	1cc4      	adds	r4, r0, #3
 80042b8:	f024 0403 	bic.w	r4, r4, #3
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d005      	beq.n	80042cc <_malloc_r+0xa8>
 80042c0:	1a21      	subs	r1, r4, r0
 80042c2:	4630      	mov	r0, r6
 80042c4:	f000 f808 	bl	80042d8 <_sbrk_r>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d0cf      	beq.n	800426c <_malloc_r+0x48>
 80042cc:	6025      	str	r5, [r4, #0]
 80042ce:	e7db      	b.n	8004288 <_malloc_r+0x64>
 80042d0:	200003d4 	.word	0x200003d4
 80042d4:	200003d8 	.word	0x200003d8

080042d8 <_sbrk_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	4c06      	ldr	r4, [pc, #24]	; (80042f4 <_sbrk_r+0x1c>)
 80042dc:	2300      	movs	r3, #0
 80042de:	4605      	mov	r5, r0
 80042e0:	4608      	mov	r0, r1
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	f7fd fbe0 	bl	8001aa8 <_sbrk>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d102      	bne.n	80042f2 <_sbrk_r+0x1a>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	b103      	cbz	r3, 80042f2 <_sbrk_r+0x1a>
 80042f0:	602b      	str	r3, [r5, #0]
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	200004e0 	.word	0x200004e0

080042f8 <__malloc_lock>:
 80042f8:	4770      	bx	lr

080042fa <__malloc_unlock>:
 80042fa:	4770      	bx	lr

080042fc <_init>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

08004308 <_fini>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr
